{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","props","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAceA,EAVF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACX,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,iBAAqDC,IAAI,oBACjE,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCMTC,G,MAVE,SAACC,GACd,OACI,qBAAKP,UAAU,YAAf,SACKO,EAAMC,SAASC,KAAI,SAACV,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCMpBQ,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9B,OACI,uBACIC,KAAK,SACLb,UAAU,SACVW,YAAaA,EACbG,SAAUF,MCkCPG,G,wDAtCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAeA,EAASC,UAC7BF,MAAK,SAACG,GAAD,OAAY,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO9C,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQK,KAAK0B,cAAcC,SAASb,EAAYY,kBAGjD,OACC,sBAAK9B,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,8BACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjCVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.99dedf03.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nconst Card = ({monster}) => {\n    return (\n        <div className=\"card-container\">\n            <img src={`https://robohash.org/${monster.id}?size=180x180`} alt=\"Monster Profile\" />\n            <h1>{monster.name}</h1>\n            <p>{monster.email}</p>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from '../card/card.component.js';\n\nimport './card-list.styles.css';\n\nconst CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n            {props.monsters.map((monster) => (\n                <Card key={monster.id} monster={monster} />\n            ))}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nimport './search-box.styles.css';\n\nconst SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input\n            type=\"search\"\n            className=\"search\"\n            placeholder={placeholder}\n            onChange={handleChange}\n        />\n    );\n};\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => (response.json()))\n    .then((users) => (this.setState({ monsters: users })));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => (\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ));\n\n     return (\n      <div className=\"App\">\n        <h1 className=\"App-title\">Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}